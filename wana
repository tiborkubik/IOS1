#!/usr/bin/env bash

POSIXLY_CORRECT=yes
IFS=' '
# Help
HOW_TO_INFO=$(printf  "wana [FILTR] [PŘÍKAZ] [LOG [LOG2 [...]]")
# Filters definition
AFTER_DATE_FLAG=0
BEFORE_DATE_FLAG=0
IPADDR_FLAG=0
URI_FLAG=0
# Command flags definition
LIST_IP_FLAG=0
LIST_HOSTS_FLAG=0
LIST_URI_FLAG=0
HIST_IP_FLAG=0
HIST_LOAD_FLAG=0
COMMAND_FLAG=0

usage () {
  echo "$0: Priklad spustenia: $HOW_TO_INFO" >&2
	exit 1
}

# Function transforms ip address to domain
print_dom () {
  while read -r line; do
    host "$line" | awk '{print $NF}' | {        #using "host"
      read -r tested_line
      if [ "$tested_line" = "2(SERVFAIL)" ]; then
        echo "$line"
      elif [ "$tested_line" = "3(NXDOMAIN)" ]; then
        echo "$line"
      else echo "$tested_line"
      fi
    }
    done
}

month_edit () {
  case $month in
    Jan) MON=01 ;;
    Feb) MON=02 ;;
    Mar) MON=03 ;;
    Apr) MON=04 ;;
    May) MON=05 ;;
    Jun) MON=06 ;;
    Jul) MON=07 ;;
    Aug) MON=08 ;;
    Sep) MON=09 ;;
    Oct) MON=10 ;;
    Nov) MON=11 ;;
    Dec) MON=12 ;;
esac
}
# With help from: https://helloacm.com/the-8-bit-dos-by-famicom-clone-bbgdos-in-the-1990s/
valid_ip () {
    if [[ $IPADDR =~ ^([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$ ]]; then
        ip=$IPADDR
    elif [[ $IPADDR =~ ^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$ ]]; then
        ip=$IPADDR
    else
        echo "$0: Invalid format of IP address." >&2
        exit 1
    fi
}

# Function filters input according to given ip address
filter_ip_addr () {
  if [ $IPADDR_FLAG -eq 0 ]; then #if we dont want to filter, we just print input
    cat
    return
  fi

  valid_ip

  while read -r line; do
      echo "$line" | awk '{printf $1}' | {
        read -r testedip
        if [ "$testedip" = "$IPADDR" ]; then # Comparing each line with input
          echo "$line"
        fi
      }
  done
}

# Function checks, if given date is in valid form
valid_date_a () {
  if [[ $AFTER_DATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
    IFS=' '
  else
    echo "$0: Invalid format of date in -a switch." >&2
    exit 1
  fi
}

# Function filters logs after given date
filter_after_date () {
  if [ $AFTER_DATE_FLAG -eq 0 ]; then #if we dont want to filter, we just print input
    cat
    return
  fi

  valid_date_a
  while read -r line; do
      echo "$line" | awk '{printf $4}' | {
        read -r testeddate
        actualdate=${testeddate:8:4}
        month=${testeddate:4:3}
        month_edit
        actualdate+=$MON
        actualdate+=${testeddate:1:2}
        actualdate+=${testeddate:13:2}
        actualdate+=${testeddate:16:2}
        actualdate+=${testeddate:19:2}
      if [ "${AFTER_DATE//[-: ]/}" \< "$actualdate" ]; then
        echo "$line"
      fi
      }
  done
}

valid_date_b () {
  if [[ $BEFORE_DATE =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}[[:space:]][0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
    IFS=' '
  else
    echo "$0: Invalid format of date in -b switch." >&2
    exit 1
  fi
}
# Function filters logs before given date
filter_before_date () {
  if [ $BEFORE_DATE_FLAG -eq 0 ]; then #if we dont want to filter, we just print input
    cat
    return
  fi

  valid_date_b
  while read -r line; do
      echo "$line" | awk '{printf $4}' | {
        read -r testeddate
        actualdate=${testeddate:8:4}
        month=${testeddate:4:3}
        month_edit
        actualdate+=$MON
        actualdate+=${testeddate:1:2}
        actualdate+=${testeddate:13:2}
        actualdate+=${testeddate:16:2}
        actualdate+=${testeddate:19:2}
      if [ "${BEFORE_DATE//[-: ]/}" \> "$actualdate" ]; then
        echo "$line"
      fi
      }
  done
}

# Function checks each uri and filters those, which fit given regex
filter_uri () {
  if [ $URI_FLAG -eq 0 ]; then #if we dont want to filter, we just print input
    cat
    return
  fi

  edUri="^"
  edUri+=$URI
  while read -r line; do
      echo "$line" | awk '{print $7}' | {
        read -r testUri
        #echo $testUri
      if [[ $testUri =~ $edUri ]]; then
        echo "$line"
      fi
    }
  done
}

#Auxilliary function in process of printing uris
list_uri_edit () {
  while read -r line; do
    if [[ $line =~ ^/ ]]; then
      echo "$line"
    fi
  done
}

# Function creates histogram of ip addresses
hist_ip_creator () {
  sort -n -r | {
  while read -r line; do
    echo "$line" | awk '{printf $1}' | {
      read -r nmbs
      hash_nmb=
      for (( i = 0; i < nmbs; i++ )); do
        hash_nmb+="#"
      done

      echo "$line" | awk '{print $2}' | {
        read -r act_ip
        printf "%s (%d): %s\n" "$act_ip" "$nmbs" "$hash_nmb"  # Format: %s (%d): %s
      }
    }
  done
  }
}

hist_load_creator () {
  awk '{print $4}' | {
    while read -r line; do
      echo "${line:1:14}"
    done
  }
}

hist_edit () {
  while read -r line; do
    echo "$line" | awk '{printf $1}' | {

      read -r nmbs
      hash_nmb=
      for (( i = 0; i < nmbs; i++ )); do
        hash_nmb+="#"
      done
      echo "$line" | awk '{print $2}' | {
        read -r act_date
        temp_date=$act_date
        act_date=${temp_date:7:4}
        month=${temp_date:3:3}
        month_edit
        act_date+="-"
        act_date+=$MON
        act_date+="-"
        act_date+=${temp_date:0:2}
        act_date+=" "
        act_date+=${temp_date:12:2}
        act_date+=":00"
        printf "%s (%d): %s\n" "$act_date" "$nmbs" "$hash_nmb"
      }
    }
  done
}

filter_all () {
  filter_ip_addr | filter_before_date | filter_uri | filter_after_date
}

# Getting values of filters
while getopts "a:b:i:u:" arg; do
  ((ind_arg=OPTIND-1))

  case $arg in
    a)              AFTER_DATE=$OPTARG
                    AFTER_DATE_FLAG=1
                  ;;
    b)              BEFORE_DATE=$OPTARG
                    BEFORE_DATE_FLAG=1
                  ;;
    i)            if [ ${!ind_arg} = "-ip" ]; then
                    IPADDR=${!OPTIND}
                    IPADDR_FLAG=1
                    ((OPTIND++))
                  else
                    usage
                  fi
                  ;;
    u)            if [ ${!ind_arg} = "-uri" ]; then
                    URI=${!OPTIND}
                    URI_FLAG=1
                    ((OPTIND++))
                  else
                    usage
                  fi
                  ;;
    *)            usage
                  ;;
  esac
done

((OPTIND--))
shift $OPTIND

# Finding out which command will be executed [just 1 of em]
case $1 in
    list-ip )               LIST_IP_FLAG=1
                            COMMAND_FLAG=1
                            ;;
    list-hosts )            LIST_HOSTS_FLAG=1
                            COMMAND_FLAG=1
                            ;;
    list-uri )              LIST_URI_FLAG=1
                            COMMAND_FLAG=1
                            ;;
    hist-ip )               HIST_IP_FLAG=1
                            COMMAND_FLAG=1
                            ;;
    hist-load )             HIST_LOAD_FLAG=1
                            COMMAND_FLAG=1
                            ;;
esac

# If a command was set, shifting
if [ $COMMAND_FLAG -eq 1 ]; then
    shift
fi

# Reading from stdin when no log files are available. Would like to re-work it, but there are so much projects :(
if [ "$1" = "" ]; then
  input=$(cat)

  if [ $COMMAND_FLAG -eq 0 ]; then
    echo "$input" | filter_all
  fi
  if [ $LIST_IP_FLAG -eq 1 ]; then
    echo "$input" | filter_all | awk '{print $1}' | sort | uniq
  fi
  if [ $LIST_HOSTS_FLAG -eq 1 ]; then
    echo "$input" | filter_all | awk '{print $1}' | print_dom | sort | uniq
  fi
  if [ $LIST_URI_FLAG -eq 1 ]; then
    echo "$input" | filter_all | awk '{print $7}' | list_uri_edit
  fi
  if [ $HIST_IP_FLAG -eq 1 ]; then
    echo "$input" | filter_all | awk '{print $1}' | sort -n -r | uniq -c | hist_ip_creator
  fi
  if [ $HIST_LOAD_FLAG -eq 1 ]; then
    echo "$input" | filter_all | hist_load_creator | sort | uniq -c | hist_edit
  fi
fi

# Cycles through all given files and pipes it
while [ "$1" != "" ]; do
    filename=$1

    # Case when file does not exist
    if [ ! -f "$filename" ]; then
      usage
    fi

    if [ $COMMAND_FLAG -eq 0 ]; then
      # Case when neither filter nor command is set
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi

    if [ $LIST_IP_FLAG -eq 1 ]; then
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi

    if [ $LIST_HOSTS_FLAG -eq 1 ]; then
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi

    if [ $LIST_URI_FLAG -eq 1 ]; then
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi

    if [ $HIST_IP_FLAG -eq 1 ]; then
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi

    if [  $HIST_LOAD_FLAG -eq 1 ]; then
      if [ "${filename: -3}" == ".gz" ]; then
        gunzip -c "$filename"
      else
        cat "$filename"
      fi
    fi
    shift
done | {  # output of all files is piped to all filters and then command is made
  if [ $COMMAND_FLAG -eq 0 ]; then
     filter_all
  fi
  if [ $LIST_IP_FLAG -eq 1 ]; then
     filter_all | awk '{print $1}' | sort | uniq
  fi
  if [ $LIST_HOSTS_FLAG -eq 1 ]; then
    filter_all | awk '{print $1}' | print_dom | sort | uniq
  fi
  if [ $LIST_URI_FLAG -eq 1 ]; then
     filter_all | awk '{print $7}' | list_uri_edit | sort | uniq
  fi
  if [ $HIST_LOAD_FLAG -eq 1 ]; then
    filter_all | hist_load_creator | sort | uniq -c | hist_edit
  fi
  if [ $HIST_IP_FLAG -eq 1 ]; then
    filter_all | awk '{print $1}' | sort -n -r | uniq -c | hist_ip_creator
  fi
}
exit 0 # Success ! :)
